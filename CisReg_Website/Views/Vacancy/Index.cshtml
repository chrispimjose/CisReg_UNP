@{
    var vacancyDetails = ViewData["VacancyDetails"] as List<dynamic>;
}

<style>
    :root {
    --customGreen: #57BE93;
    --customGreen-hover: #40a57b;
    --text-color-default: #374151;
    --text-color-light: #6b7280;
    --border-color: #e5e7eb;
    --background-color: white;
    --shadow-color: rgba(0, 0, 0, 0.1);
    }

    body {
    background-color: var(--background-color);
    font-family: 'Poppins', sans-serif;
    }

    h1 {
    color: var(--customGreen);
    }

    form {
    display: flex;
    flex-wrap: wrap;
    gap: 1rem;
    margin-bottom: 2rem;
    width: 100%;
    justify-content: space-between;
    }

    label {
    font-size: 1rem; /* Aumenta o tamanho da fonte dos rótulos */
    font-weight: 500;
    color: var(--text-color-default);
    margin-bottom: 0.25rem; /* Reduz a margem inferior */
    }

    input, select {
    font-size: 1rem; /* Aumenta o tamanho da fonte dos campos */
    padding: 0.6rem; /* Aumenta o espaçamento interno */
    border: 1px solid var(--border-color);
    border-radius: 0.375rem;
    background-color: var(--background-color);
    color: var(--text-color-default);
    box-shadow: 0 1px 2px var(--shadow-color);
    transition: all 0.2s;
    margin-bottom: 0.5rem; /* Reduz o espaçamento inferior */
    }


    input:focus,
    select:focus {
    border-color: var(--customGreen);
    outline: none;
    box-shadow: 0 0 0 3px rgba(87, 190, 147, 0.4);
    }

    .btn {
    font-size: 1rem; /* Aumenta o tamanho da fonte dos botões */
    padding: 0.6rem 1.2rem; /* Ajusta o espaçamento interno do botão */
    background-color: var(--customGreen);
    color: white;
    font-weight: bold;
    border-radius: 0.375rem;
    text-align: center;
    cursor: pointer;
    transition: all 0.2s;
    width: 100%;
    margin-top: 2rem; /* Adiciona espaço acima do botão */
    }

    .btn:hover {
    background-color: var(--customGreen-hover);
    transform: scale(1.05);
    }

    .container {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
    gap: 1.5rem;
    padding: 1rem;
    justify-content: center;
    align-items: center;
    }

    .card {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    background-color: var(--background-color);
    border: 1px solid var(--border-color);
    border-radius: 0.5rem;
    padding: 1.5rem;
    box-shadow: 0 12px 14px rgba(0, 0, 0, 0.1);
    transition: transform 0.2s;
    min-height: 330px;
    cursor: pointer;
    }

    .card .info-container {
    margin-top: auto;
    text-align: center;
    }

    .card:hover {
    transform: scale(1.05);
    }

    .card:active {
    box-shadow: inset -1px -1px;
    }

    .title {
    font-size: 1.125rem;
    color: var(--text-color-default);
    }

    .info {
    font-size: 0.875rem;
    color: var(--text-color-light);
    margin-bottom: 0.5rem;
    }

    .info span {
    font-weight: bold;
    color: var(--text-color-default);
    }

    .alert-circle {
    display: flex;
    align-items: center;
    justify-content: center;
    width: 1.5rem;
    height: 1.5rem;
    background-color: #f56565;
    border-radius: 9999px;
    }

    .text-sm {
    font-size: 0.875rem;
    }

    .font-bold {
    font-weight: 700;
    }

    .centered-container {
        display: flex;
        align-items: center;
        justify-content: center;
        min-height: 2rem; /* Ajuste o tamanho conforme necessário */
    }

    .flex-row-container {
        display: flex;
        justify-content: space-between;
        align-items: center;
        width: 100%;
    }

        .flex-row-container .name {
            text-align: left;
            flex: 1; /* Nome ocupa todo o espaço disponível à esquerda */
        }

        .flex-row-container .alert-circle {
            flex: none; /* A exclamação mantém seu tamanho fixo à direita */
            display: flex;
            align-items: center;
            justify-content: center;
            width: 1.5rem;
            height: 1.5rem;
            background-color: #f56565;
            border-radius: 9999px;
        }





</style>

<h1 class="text-center text-4xl my-12">
    Gerenciamento de Vagas
</h1>

<!-- Filtro em formato de linha -->
<div class="container">
    <form method="get" asp-controller="Vacancy" asp-action="Index" class="p-6 bg-white shadow-md rounded-md">
        <div class="flex gap-4 flex-wrap">
            <!-- Filtro por Status -->
            <div class="flex-1 min-w-[180px]">
                <label for="status" class="block text-sm font-medium text-gray-700 mb-1">Status</label>
                <select id="status" name="status" class="w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-customGreen focus:border-customGreen">
                    <option value="">Todos</option>
                    <option value="Vazio">Vazio</option>
                    <option value="Awaiting_validation">Aguardando Validação</option>
                    <option value="Available">Available</option>
                    <option value="Canceled">Canceled</option>
                    <option value="Occupied">Ocupado</option>
                </select>
            </div>
            <!-- Filtro por Nome do Paciente -->
            <div class="flex-1 min-w-[180px]">
                <label for="patientName" class="block text-sm font-medium text-gray-700 mb-1">Nome do Paciente</label>
                <input type="text" id="patientName" name="patientName" class="w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-customGreen focus:border-customGreen" value="@ViewData["SelectedPatientName"]" placeholder="Digite o nome do paciente" />
            </div>
            <!-- Filtro por Formação Acadêmica -->
            <div class="flex-1 min-w-[180px]">
                <label for="academic" class="block text-sm font-medium text-gray-700 mb-1">Formação Acadêmica</label>
                <select id="academic" name="academic" class="w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-customGreen focus:border-customGreen">
                    <option value="">Selecione a formação acadêmica</option>
                    @if (ViewData["Academics"] != null)
                    {
                        foreach (var academic in (List<string>)ViewData["Academics"])
                        {
                            <option value="@academic">@academic</option>
                        }
                    }
                </select>
            </div>
            <!-- Filtro por Especialidade -->
            <div class="flex-1 min-w-[180px]">
                <label for="specialty" class="block text-sm font-medium text-gray-700 mb-1">Especialidade</label>
                <select id="specialty" name="specialty" class="w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-customGreen focus:border-customGreen">
                    <option value="">Selecione uma especialidade</option>
                </select>

            </div>
            <!-- Filtro por Data -->
            <div class="flex-1 min-w-[180px]">
                <label for="date" class="block text-sm font-medium text-gray-700 mb-1">Data</label>
                <input type="date" id="date" name="date" class="w-full p-2 border border-gray-300 rounded-md shadow-sm focus:ring-customGreen focus:border-customGreen" />
            </div>
            <!-- Botão de Filtrar -->
            <div class="flex justify-center items-center min-w-[180px] ">
                <button type="submit" class="px-4 py-2 bg-customGreen text-white font-medium rounded-md shadow-sm hover:bg-customGreen-hover transition w-full  btn btn-primary">
                    Filtrar
                </button>
            </div>
        </div>
    </form>
</div>


<!-- Cards de Vagas -->
<div class="container">
    @foreach (var vacancy in vacancyDetails)
    {
        <div class="card">
            @if (vacancy.Status == "Vazio")
            {
                <!-- Card para vaga vazia -->
                <h3 class="title">Vaga Vazia</h3>
                <p class="info">
                    <span>Status:</span> Vaga sem reserva
                </p>

                <div class="info-container">
                    <p class="info">
                        <span>Para preencher, clique abaixo:</span>
                    </p>
                    <form asp-controller="Vacancy" asp-action="Preenchimento" method="post">
                        <input type="hidden" name="id" value="@vacancy.HallId" />
                        <button type="submit" class="btn btn-primary">
                            <i class="fa-solid fa-plus-circle"></i> Preencher Vaga
                        </button>
                    </form>
                </div>

            }
            else
            {
                <div onclick="window.location.href='@Url.Action("Edit", "Vacancy", new { id = vacancy.VacancyId, userPermission = vacancy.userPermission })'">


                    @if (vacancy.Status == "Awaiting_validation")
                    {
                        <div class="flex-row-container">
                            <span class="name title"></span>
                            <div class="alert-circle">
                                <span class="text-red text-sm font-bold">!</span>
                            </div>
                        </div>





                    }
                    else {

                        <div class="flex-row-container">
                            <h3 class="name title">@vacancy.ProfessionalName</h3>
                            <span></span> <!-- Espaço vazio para alinhar corretamente -->
                        </div>


             
                    }
                    
                    <p class="info">
                        <span>Profissão:</span> @vacancy.ProfessionalAcademic
                    </p>
                    <p class="info">
                        <span>Especialidade:</span> @vacancy.ProfessionalSpecialty
                    </p>
                    <p class="info">
                        <span>Paciente:</span> @($"{vacancy.PatientFirstName} {vacancy.PatientLastName}")
                    </p>
                    <p class="info">
                        <span>Data:</span> @vacancy.AvailableHour.ToString("dd/MM/yyyy")
                    </p>
                    <p class="info">
                        <span>Horário:</span> @vacancy.AvailableHour.ToString("HH:mm")
                    </p>
                    <p class="info">
                        <span>Status:</span> @vacancy.Status
                    </p>

              
                </div>
      <div class="button-container">
                        
                        <form asp-controller="Vacancy" asp-action="Print" method="post">
                            <input type="hidden" name="id" value="@vacancy.VacancyId" />
                            <button type="submit" class="btn btn-primary">
                                <i class="fa-solid fa-print"></i> Imprimir
                            </button>
                        </form>
                    </div>

            }
        </div>
    }
</div>


<script>


    document.addEventListener("DOMContentLoaded", async function () {
        const academicSelect = document.getElementById("academic");

        try {
            const response = await fetch('/Vacancy/GetAcademics'); // Endpoint para buscar os dados
            const data = await response.json();

            if (data.error) {
                console.error(data.error);
                return;
            }

            if (data.academics) {
                academicSelect.innerHTML = '<option value="">Selecione a formação acadêmica</option>';
                data.academics.forEach(academic => {
                    const option = document.createElement("option");
                    option.value = academic;
                    option.textContent = academic;
                    academicSelect.appendChild(option);
                });
            }
        } catch (error) {
            console.error("Erro ao carregar academias:", error);
        }
    });

    document.addEventListener("DOMContentLoaded", function () {
            const academicSelect = document.getElementById("academic");
            const specialtySelect = document.getElementById("specialty");
            academicSelect.addEventListener("change", async function () {
                const selectedAcademic = academicSelect.value;
                specialtySelect.innerHTML = '<option value="">Selecione uma especialidade</option>'; // Reseta as opções
                if (!selectedAcademic) return; // Não faz nada se nenhuma formação for selecionada
                try {
                    specialtySelect.innerHTML = '<option value="">Carregando...</option>'; // Mostra carregando
                    const response = await fetch(`/Vacancy/GetEspecialidadesPorFormacao?formacaoAcademica=${encodeURIComponent(selectedAcademic)}`);
                    const data = await response.json();
                    // Caso a API retorne um erro
                    if (data.error) {
                        console.warn(data.error);
                        specialtySelect.innerHTML = `<option value="">${data.error}</option>`;
                        return;
                    }
                    // Caso especialidades sejam retornadas
                    if (data.especialidades && Array.isArray(data.especialidades)) {
                        specialtySelect.innerHTML = '<option value="">Selecione uma especialidade</option>'; // Reseta para estado padrão
                        data.especialidades.forEach(especialidade => {
                            const option = document.createElement("option");
                            option.value = especialidade.nome; // Usando o campo 'nome' do objeto retornado
                            option.textContent = especialidade.nome;
                            specialtySelect.appendChild(option);
                        });
                    } else {
                        specialtySelect.innerHTML = '<option value="">Nenhuma especialidade disponível</option>';
                    }
                } catch (error) {
                    console.error("Erro ao buscar especialidades:", error);
                    specialtySelect.innerHTML = '<option value="">Erro ao carregar especialidades</option>';
                }
            });
        });

</script>